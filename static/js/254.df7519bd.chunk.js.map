{"version":3,"file":"static/js/254.df7519bd.chunk.js","mappings":"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","sources":["i18n/locales.ts","components/Message.tsx","components/Guesser.tsx"],"sourcesContent":["import { LanguageName } from \"../lib/country\";\r\nimport { Locale, LocaleMessages } from \"../lib/locale\";\r\nimport { English } from \"./messages/en-CA\";\r\nimport { Spanish } from \"./messages/es-MX\";\r\n\r\n// export const LOCALES: LocaleList = {\r\n//   English: \"English\",\r\n//   Spanish: \"Spanish\",\r\n// };\r\n\r\nexport const LOCALES = {\r\n  English: English,\r\n  Spanish: Spanish,\r\n};\r\n\r\nexport const langNameMap: Record<Locale, LanguageName> = {\r\n  \"es-MX\": \"NAME_ES\",\r\n  \"en-CA\": \"NAME_EN\",\r\n};\r\n","// import useCheckMobile from \"../hooks/useCheckMobile\";\r\nimport { isMobile } from \"react-device-detect\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { useContext } from \"react\";\r\nimport { LocaleContext } from \"../i18n/LocaleContext\";\r\nimport { langNameMap } from \"../i18n/locales\";\r\nimport { getCountry } from \"../util/answer\";\r\n\r\ntype Props = {\r\n  win: boolean;\r\n  error: any;\r\n  guesses: number;\r\n  seed: number;\r\n};\r\n\r\nexport function Message({ win, error, guesses, seed }: Props) {\r\n  const { locale } = useContext(LocaleContext);\r\n  let answerCountry = getCountry(seed);\r\n\r\n  let name = answerCountry.properties.NAME;\r\n  if (locale !== \"en-CA\") {\r\n    const langName = langNameMap[locale];\r\n    name = answerCountry[\"properties\"][langName];\r\n  }\r\n\r\n  if (error) {\r\n    return <p className=\"text-red-700 \">{error}</p>;\r\n  } else if (win) {\r\n    return (\r\n      <p className=\"text-green-800 dark:text-green-300 font-bold \">\r\n        <FormattedMessage id=\"Game7\" values={{ answer: name }} />\r\n      </p>\r\n    );\r\n  } else if (guesses === 0) {\r\n    return (\r\n      <p className=\"text-gray-700 dark:text-gray-400 \">\r\n        <FormattedMessage id=\"Game3\" />\r\n      </p>\r\n    );\r\n  } else if (guesses === 1) {\r\n    return (\r\n      <p className=\"text-gray-700 dark:text-gray-400 \">\r\n        <FormattedMessage\r\n          id=\"Game4\"\r\n          values={{ click: isMobile ? \"tap\" : \"click\" }}\r\n        />\r\n      </p>\r\n    );\r\n  } else {\r\n    return <p className=\"text-red-700 \"></p>;\r\n  }\r\n}\r\n","import { FormEvent, useContext, useState } from \"react\";\r\nimport { Country, LanguageName } from \"../lib/country\";\r\nimport { Message } from \"./Message\";\r\nimport { polygonDistance } from \"../util/distance\";\r\nimport alternateNames from \"../data/alternate_names.json\";\r\nimport { LocaleContext } from \"../i18n/LocaleContext\";\r\nimport { Locale } from \"../lib/locale\";\r\nimport localeList from \"../i18n/messages\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { langNameMap } from \"../i18n/locales\";\r\nimport { getCountry } from \"../util/answer\";\r\nconst countryData: Country[] = require(\"../data/country_data.json\").features;\r\n\r\ntype Props = {\r\n  guesses: Country[];\r\n  setGuesses: React.Dispatch<React.SetStateAction<Country[]>>;\r\n  win: boolean;\r\n  setWin: React.Dispatch<React.SetStateAction<boolean>>;\r\n  seed: number;\r\n};\r\n\r\nexport default function Guesser({ guesses, setGuesses, win, setWin, seed }: Props) {\r\n  const [guessName, setGuessName] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const { locale } = useContext(LocaleContext);\r\n  let answerCountry = getCountry(seed);\r\n\r\n  const langName = langNameMap[locale];\r\n\r\n  function findCountry(countryName: string, list: Country[]) {\r\n    return list.find((country) => {\r\n      const { NAME, NAME_LONG, ABBREV, ADMIN, BRK_NAME, NAME_SORT } =\r\n        country.properties;\r\n\r\n      return (\r\n        NAME.toLowerCase() === countryName ||\r\n        NAME_LONG.toLowerCase() === countryName ||\r\n        ADMIN.toLowerCase() === countryName ||\r\n        ABBREV.toLowerCase() === countryName ||\r\n        ABBREV.replace(/\\./g, \"\").toLowerCase() === countryName ||\r\n        NAME.replace(/-/g, \" \").toLowerCase() === countryName ||\r\n        BRK_NAME.toLowerCase() === countryName ||\r\n        NAME_SORT.toLowerCase() === countryName ||\r\n        country.properties[langName].toLowerCase() === countryName\r\n      );\r\n    });\r\n  }\r\n\r\n  // Check territories function\r\n  function runChecks() {\r\n    const trimmedName = guessName\r\n      .trim()\r\n      .toLowerCase()\r\n      .replace(/&/g, \"and\")\r\n      .replace(/^st\\s/g, \"st. \");\r\n    const oldNamePair = alternateNames.find((pair) => {\r\n      return pair.old === trimmedName;\r\n    });\r\n    const userGuess = oldNamePair ? oldNamePair.real : trimmedName;\r\n    const alreadyGuessed = findCountry(userGuess, guesses);\r\n    if (alreadyGuessed) {\r\n      setError(localeList[locale][\"Game6\"]);\r\n      return;\r\n    }\r\n    const guessCountry = findCountry(userGuess, countryData);\r\n    if (!guessCountry) {\r\n      setError(localeList[locale][\"Game5\"]);\r\n      return;\r\n    }\r\n    if (guessCountry.properties.NAME === answerCountry.properties.NAME) {\r\n      setWin(true);\r\n    }\r\n    return guessCountry;\r\n  }\r\n\r\n  function addGuess(e: FormEvent<HTMLFormElement>) {\r\n    e.preventDefault();\r\n    setError(\"\");\r\n    let guessCountry = runChecks();\r\n    if (guessCountry && answerCountry) {\r\n      guessCountry[\"proximity\"] = polygonDistance(guessCountry, answerCountry);\r\n      setGuesses([...guesses, guessCountry]);\r\n      setGuessName(\"\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"mt-10 mb-6 block mx-auto text-center\">\r\n      <form\r\n        onSubmit={addGuess}\r\n        className=\"w-80 flex space-x-4 mx-auto my-2 justify-center\"\r\n      >\r\n        <input\r\n          className=\"shadow px-2 py-1 md:py-0\r\n          text-gray-700 dark:bg-slate-300 focus:outline-none \r\n          focus:shadow-outline disabled:bg-slate-400\r\n          border rounded disabled:border-slate-400\r\n          w-full\"\r\n          type=\"text\"\r\n          name=\"guesser\"\r\n          id=\"guesser\"\r\n          value={guessName}\r\n          onChange={(e) => setGuessName(e.currentTarget.value)}\r\n          disabled={win}\r\n          placeholder={guesses.length === 0 ? localeList[locale][\"Game1\"] : \"\"}\r\n          autoComplete=\"new-password\"\r\n        />\r\n        <button\r\n          className=\"bg-blue-700 dark:bg-purple-800 hover:bg-blue-900 dark:hover:bg-purple-900 disabled:bg-blue-900  text-white \r\n          font-bold py-1 md:py-2 px-4 rounded focus:shadow-outline \"\r\n          type=\"submit\"\r\n          disabled={win}\r\n        >\r\n          <FormattedMessage id=\"Game2\" />\r\n        </button>\r\n      </form>\r\n      <Message win={win} error={error} guesses={guesses.length} seed={seed} />\r\n    </div>\r\n  );\r\n}\r\n"],"names":["langNameMap","English","Spanish","Message","win","error","guesses","seed","locale","useContext","LocaleContext","answerCountry","getCountry","name","properties","NAME","langName","className","id","values","answer","click","isMobile","countryData","require","Guesser","setGuesses","setWin","useState","guessName","setGuessName","setError","findCountry","countryName","list","find","country","NAME_LONG","ABBREV","ADMIN","BRK_NAME","NAME_SORT","toLowerCase","replace","onSubmit","e","preventDefault","guessCountry","trimmedName","trim","oldNamePair","alternateNames","pair","old","userGuess","real","localeList","runChecks","polygonDistance","type","value","onChange","currentTarget","disabled","placeholder","length","autoComplete"],"sourceRoot":""}